"""Initial migration

Revision ID: 79df871a1af6
Revises: 
Create Date: 2025-05-11 11:41:21.831041

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '79df871a1af6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stores',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('stores', schema=None) as batch_op:
        batch_op.create_index('idx_store_name', ['name'], unique=False)

    op.create_table('suppliers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('role', sa.Enum('MERCHANT', 'ADMIN', 'CLERK', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='userstatus'), nullable=False),
    sa.Column('manager_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_user_email', ['email'], unique=False)
        batch_op.create_index('idx_user_manager', ['manager_id'], unique=False)
        batch_op.create_index('idx_user_role', ['role'], unique=False)

    op.create_table('invitations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('MERCHANT', 'ADMIN', 'CLERK', name='userrole'), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=True),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'EXPIRED', name='invitationstatus'), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    with op.batch_alter_table('invitations', schema=None) as batch_op:
        batch_op.create_index('idx_invitation_status', ['status'], unique=False)
        batch_op.create_index('idx_invitation_token', ['token'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('message', sa.String(length=500), nullable=False),
    sa.Column('type', sa.Enum('INVITATION', 'LOW_STOCK', 'SUPPLY_REQUEST', 'SPOILAGE', 'PAYMENT', 'ACCOUNT_STATUS', 'ACCOUNT_DELETION', 'USER_INVITED', name='notificationtype'), nullable=False),
    sa.Column('related_entity_id', sa.Integer(), nullable=True),
    sa.Column('related_entity_type', sa.String(length=50), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index('idx_notification_type', ['type'], unique=False)
        batch_op.create_index('idx_notification_user_read', ['user_id', 'is_read'], unique=False)

    op.create_table('password_resets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=36), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('sku', sa.String(length=50), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('current_stock', sa.Integer(), nullable=False),
    sa.Column('min_stock_level', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sku')
    )
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.create_index('idx_product_category', ['category_id'], unique=False)
        batch_op.create_index('idx_product_stock', ['current_stock'], unique=False)
        batch_op.create_index('idx_product_store', ['store_id'], unique=False)

    op.create_table('user_store',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'store_id')
    )
    with op.batch_alter_table('user_store', schema=None) as batch_op:
        batch_op.create_index('idx_user_store', ['user_id', 'store_id'], unique=False)

    op.create_table('inventory_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('quantity_received', sa.Integer(), nullable=False),
    sa.Column('quantity_spoiled', sa.Integer(), nullable=False),
    sa.Column('buying_price', sa.Float(), nullable=False),
    sa.Column('selling_price', sa.Float(), nullable=False),
    sa.Column('payment_status', sa.Enum('PAID', 'UNPAID', name='paymentstatus'), nullable=False),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('recorded_by', sa.Integer(), nullable=False),
    sa.Column('entry_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['recorded_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('inventory_entries', schema=None) as batch_op:
        batch_op.create_index('idx_entry_category', ['category_id'], unique=False)
        batch_op.create_index('idx_entry_date', ['entry_date'], unique=False)
        batch_op.create_index('idx_entry_payment', ['payment_status'], unique=False)
        batch_op.create_index('idx_entry_product', ['product_id'], unique=False)
        batch_op.create_index('idx_entry_store', ['store_id'], unique=False)

    op.create_table('sales_growth',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('month', sa.Date(), nullable=False),
    sa.Column('revenue', sa.Float(), nullable=False),
    sa.Column('growth_percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sales_growth', schema=None) as batch_op:
        batch_op.create_index('idx_sales_growth_product', ['product_id'], unique=False)
        batch_op.create_index('idx_sales_growth_store_month', ['store_id', 'month'], unique=False)

    op.create_table('sales_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('quantity_sold', sa.Integer(), nullable=False),
    sa.Column('selling_price', sa.Float(), nullable=False),
    sa.Column('sale_date', sa.DateTime(), nullable=True),
    sa.Column('recorded_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['recorded_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sales_records', schema=None) as batch_op:
        batch_op.create_index('idx_sales_date', ['sale_date'], unique=False)
        batch_op.create_index('idx_sales_product', ['product_id'], unique=False)
        batch_op.create_index('idx_sales_recorded_by', ['recorded_by_id'], unique=False)
        batch_op.create_index('idx_sales_store', ['store_id'], unique=False)

    op.create_table('supply_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('quantity_requested', sa.Integer(), nullable=False),
    sa.Column('clerk_id', sa.Integer(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', name='requeststatus'), nullable=False),
    sa.Column('decline_reason', sa.Text(), nullable=True),
    sa.Column('approval_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['clerk_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('supply_requests', schema=None) as batch_op:
        batch_op.create_index('idx_supply_request_status', ['status'], unique=False)
        batch_op.create_index('idx_supply_request_store', ['store_id'], unique=False)

    op.create_table('payment_audits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_entry_id', sa.Integer(), nullable=False),
    sa.Column('supplier_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('old_status', sa.Enum('PAID', 'UNPAID', name='paymentstatus'), nullable=False),
    sa.Column('new_status', sa.Enum('PAID', 'UNPAID', name='paymentstatus'), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_entry_id'], ['inventory_entries.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('payment_audits', schema=None) as batch_op:
        batch_op.create_index('idx_payment_audit_date', ['change_date'], unique=False)
        batch_op.create_index('idx_payment_audit_entry', ['inventory_entry_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('payment_audits', schema=None) as batch_op:
        batch_op.drop_index('idx_payment_audit_entry')
        batch_op.drop_index('idx_payment_audit_date')

    op.drop_table('payment_audits')
    with op.batch_alter_table('supply_requests', schema=None) as batch_op:
        batch_op.drop_index('idx_supply_request_store')
        batch_op.drop_index('idx_supply_request_status')

    op.drop_table('supply_requests')
    with op.batch_alter_table('sales_records', schema=None) as batch_op:
        batch_op.drop_index('idx_sales_store')
        batch_op.drop_index('idx_sales_recorded_by')
        batch_op.drop_index('idx_sales_product')
        batch_op.drop_index('idx_sales_date')

    op.drop_table('sales_records')
    with op.batch_alter_table('sales_growth', schema=None) as batch_op:
        batch_op.drop_index('idx_sales_growth_store_month')
        batch_op.drop_index('idx_sales_growth_product')

    op.drop_table('sales_growth')
    with op.batch_alter_table('inventory_entries', schema=None) as batch_op:
        batch_op.drop_index('idx_entry_store')
        batch_op.drop_index('idx_entry_product')
        batch_op.drop_index('idx_entry_payment')
        batch_op.drop_index('idx_entry_date')
        batch_op.drop_index('idx_entry_category')

    op.drop_table('inventory_entries')
    with op.batch_alter_table('user_store', schema=None) as batch_op:
        batch_op.drop_index('idx_user_store')

    op.drop_table('user_store')
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_index('idx_product_store')
        batch_op.drop_index('idx_product_stock')
        batch_op.drop_index('idx_product_category')

    op.drop_table('products')
    op.drop_table('password_resets')
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index('idx_notification_user_read')
        batch_op.drop_index('idx_notification_type')

    op.drop_table('notifications')
    with op.batch_alter_table('invitations', schema=None) as batch_op:
        batch_op.drop_index('idx_invitation_token')
        batch_op.drop_index('idx_invitation_status')

    op.drop_table('invitations')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('idx_user_role')
        batch_op.drop_index('idx_user_manager')
        batch_op.drop_index('idx_user_email')

    op.drop_table('users')
    op.drop_table('suppliers')
    with op.batch_alter_table('stores', schema=None) as batch_op:
        batch_op.drop_index('idx_store_name')

    op.drop_table('stores')
    op.drop_table('product_categories')
    # ### end Alembic commands ###
